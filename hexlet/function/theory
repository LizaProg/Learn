ВЫПОЛНЕНИЕ ФУНКЦИЙ

Выражения — вычисляются
Инструкции — исполняются


К выражениям относятся:

Вызов функции
Арифметические и логические операции
Тернарный оператор
и другие


К инструкциям относятся:

for
while
break
return
if
и другие


//Пройдемся по примеру выше. f(f1(f2(n3, f3(n1, n2))), f4()) содержит в аргументах два выражения:

f4()
f1(f2(n3, f3(n1, n2))).
    этот вызов содержит один аргумент — вызов функции: f2(n3, f3(n1, n2)),
    который в свою очередь содержит два аргумента: n3 и вызов функции f3(n1, n2).


//
const f1 = () => console.log('called f1');
const f2 = () => console.log('called f2');
const f3 = () => console.log('called f3');
const f4 = () => console.log('called f4');
const f5 = () => console.log('called f5');
const f6 = () => console.log('called f6');

f1(f2(f4(), f5()), f3(f6()));
вычисление идет с самого глубокого уровня слева направо.
1.f4(),
    f5()
2.f2()
3.f6()
4.f3()
5.f1()

//ОБЬЕКТЫ ПЕРВОГО КЛАССА
Объектами первого класса в контексте конкретного языка программирования называются элементы, которые могут быть переданы как параметр, возвращены из функции, присвоены переменной. Другими словами речь идет про все, что может быть данными.

П1
// Определяем функцию v = v и тут же вызываем ее
(v => v)('run'); // => run
// Тот же код с использованием промежуточной константы.
// Попробуйте мысленно заменить `identity` на `v => v`, тогда
// получится (v => v)('run'). С выражениями так можно поступать всегда.
// const identity = v => v;
// identity('run'); // => run

П2
identity(v => v)('run'); // => run
// (v => v)(v => v)('run') // => run

П3
((a, b) => a + b)(3, 2); // => 5
// const sum = (a, b) => a + b;
// sum(3, 2); // => 5

П4
const sqrt = identity(Math.sqrt);
console.log(sqrt === Math.sqrt); // true
sqrt(4); // => 2

функциями высшего порядка
 Функции, которые принимают на вход другие функции или возвращают другие функции.

 const sum = identity((a, b) => a + b);
 sum(3, 5); // => 8

 // const f = (a, b) => a + b;
 // const sum = identity(f);
 // sum(3, 5); // => 8

 Что интересно, имени нет даже у такой функции const f = () => {}.
 То есть мы просто связали константу с функцией, но сама функция ничего про константу не знает.
 Возможно звучит слегка безумно, но это так.
 Ведь мы можем взять и связать эту функцию уже с другой константой.
 По этой причине такие функции часто называют анонимными.
 Другое распространенное название - лямбда-функция.


 const callTwice = (f, arg) => f(f(arg));
 callTwice(Math.sqrt, 16); // => 2
 callTwice(x => x ** 2, 3); // => 81
 // const f = x => x ** 2;
 // f(f(3));
 callTwice применяет переданную функцию к своему аргументу два раза. Если расписать подробнее, то происходит следующее:
 const res1 = f(arg);
 const res2 = f(res1);
 return res2;


//const result = ((a, b) => a ** b)(5, 2);
//25

//возврат функции из функции
Функция sum принимает x и возвращает функцию, которая
принимает y и возвращает функцию, которая
принимает z и возвращает функцию, которая
возвращает сумму x + y + z

const sum = x => y => z => x + y + z; // расставим скобки
                                      // const sum = x => (y => (z => x + y + z));

sum(1)(3)(5); // => 9



sum(1)(3)(5); // => 9
const sum1 = x => y => z => x + y + z;
// sum(1)
const sum2 = y => z => 1 + y + z;
// sum(1)(3)
const sum3 = z => 1 + 3 + z;
// sum(1)(3)(5)
const sum4 = 1 + 3 + 5; // => 9


нужно запомнить пароль пользователя, а потом проверять его, когда пользователь будет заново заходить. Можно смоделировать функцию savePassword, которая принимает на вход пароль и возвращает предикат (это функция возвращающая true или false) для его проверки. Посмотрите как это выглядит:

const secret = 'qwerty';
// Возвращается предикат.
const isCorrectPassword = savePassword(secret);

// Теперь можно проверять
console.log(isCorrectPassword('wrong password')); // => false
console.log(isCorrectPassword('qwerty')); // => true
А вот как выглядит код функции savePassword:

const savePassword = password => passwordForCheck => password === passwordForCheck;














Ниже определена функция getIncreasedNumFunction, которая принимает на вход значение множителя и возвращает функцию num => num * multiplier. Возвращаемая функция работает следующим образом: она принимает на вход число num и возвращает произведение этого числа на множитель multiplier.

const getIncreasedNumFunction = multiplier => num => num * multiplier;

// Function === num => num * 3
getIncreasedNumFunction(3);
// (num => num * 3)(15) ---> 15 * 3 === 45
getIncreasedNumFunction(3)(15);

// Function === num => num * 7
getIncreasedNumFunction(7);
// Function(4) === (num => num * 7)(4) ---> 4 * 7 === 28
getIncreasedNumFunction(7)(4);
// аналогично
// Function === num => num * 7
const getIncreasedBySevenTimes = getIncreasedNumFunction(7);
// 4 * 7 === 28
getIncreasedBySevenTimes(4);


